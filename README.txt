Fonctionnalit√©s :

‚úÖ Fusion de 2 vid√©os (principale + incrustation)
‚úÖ Alignement temporel : START (d√©but) ou END (fin)
‚úÖ Positionnement : top-left, top-right, bottom-left, bottom-right, center, ou coordonn√©es personnalis√©es
‚úÖ Chroma key : rendre une couleur transparente (vert par d√©faut)
‚úÖ Redimensionnement de la vid√©o d'incrustation
‚úÖ Tol√©rance ajustable pour le chroma key

Instructions de compilation :
Pr√©requis
bash# Sur Ubuntu/Debian
sudo apt-get install cmake build-essential libopencv-dev

# Sur macOS (avec Homebrew)
brew install cmake opencv

# Sur Windows
# Installer OpenCV et configurer les variables d'environnement
Compilation
bash# Cr√©er un dossier build
mkdir build
cd build

# Configurer avec CMake
cmake ..

# Compiler
cmake --build .

# Ou avec make
make
Exemples d'utilisation :
bash# Exemple basique - overlay en haut √† gauche
./video_merger -m video_principale.mp4 -o overlay.mp4 -out resultat.avi

# Avec chroma key vert (fond vert transparent)
./video_merger -m main.mp4 -o green_screen.mp4 -out result.avi -c 0,255,0

# Position en bas √† droite, alignement √† la fin
./video_merger -m main.mp4 -o overlay.mp4 -out result.avi \
  -p bottomright -a end

# Position personnalis√©e avec coordonn√©es
./video_merger -m main.mp4 -o overlay.mp4 -out result.avi \
  -p custom -x 100 -y 50

# Avec redimensionnement (50% de la taille)
./video_merger -m main.mp4 -o overlay.mp4 -out result.avi \
  -s 0.5 -p topright

# Chroma key bleu avec tol√©rance √©lev√©e
./video_merger -m main.mp4 -o blue_screen.mp4 -out result.avi \
  -c 0,0,255 -t 60
Structure du projet :
video-merger/
‚îú‚îÄ‚îÄ CMakeLists.txt
‚îú‚îÄ‚îÄ main.cpp
‚îî‚îÄ‚îÄ build/
    ‚îî‚îÄ‚îÄ video_merger (ex√©cutable apr√®s compilation)
Le programme affiche la progression en temps r√©el et sauvegarde le r√©sultat en format AVI (codec MJPEG). Vous pouvez modifier le codec dans le code si n√©cessaire !R√©essayerClaude n'a pas encore la capacit√© d'ex√©cuter le code qu'il g√©n√®re.CEst ce que tu peut ajouter aussi comme parametre ou va etre au niveau temporel ,  incrust√© la video secondaire , cela peut etre a debut , ou alors la duree de la video main - la duree de la video secondaire , ou alors grace a un nombre de frame ou a un time stampModifierVideo Merger avec Chroma KeyCode‚ÄÇ‚àô‚ÄÇVersion 2¬†enum class Position { TOP_LEFT, TOP_RIGHT, BOTTOM_LEFT, BOTTOM_RIGHT, CENTER, CUSTOM };
enum class TimeAlign { START, END, FRAME, TIMESTAMP };

struct Config {
    string mainVideo;
    string overlayVideo;
    string outputVideo;
    Position positiParfait ! J'ai ajout√© les nouveaux param√®tres d'alignement temporel. Voici les nouvelles possibilit√©s :
Nouveaux param√®tres temporels :
1. Par frame (-a frame -f <number>)
Commence l'incrustation √† une frame sp√©cifique
bash# Commencer l'overlay √† la frame 150
./video_merger -m main.mp4 -o overlay.mp4 -a frame -f 150 -out result.avi
2. Par timestamp (-a timestamp -ts <seconds>)
Commence l'incrustation √† un moment pr√©cis en secondes
bash# Commencer l'overlay √† 5.5 secondes
./video_merger -m main.mp4 -o overlay.mp4 -a timestamp -ts 5.5 -out result.avi

# Commencer √† 1 minute 30
./video_merger -m main.mp4 -o overlay.mp4 -ts 90 -out result.avi
3. Au d√©but (-a start - par d√©faut)
L'overlay commence d√®s le d√©but
bash./video_merger -m main.mp4 -o overlay.mp4 -a start -out result.avi
4. √Ä la fin (-a end)
L'overlay se termine en m√™me temps que la vid√©o principale
bash./video_merger -m main.mp4 -o overlay.mp4 -a end -out result.avi
Exemples complets :
bash# Overlay avec fond vert, commence √† 10 secondes, en bas √† droite
./video_merger -m main.mp4 -o green_screen.mp4 \
  -c 0,255,0 -ts 10 -p bottomright -out result.avi

# Overlay √† 50% de taille, commence √† la frame 200, position personnalis√©e
./video_merger -m main.mp4 -o overlay.mp4 \
  -s 0.5 -f 200 -p custom -x 100 -y 50 -out result.avi

# Overlay centr√© qui se termine avec la vid√©o principale
./video_merger -m main.mp4 -o overlay.mp4 \
  -a end -p center -out result.avi

# Combine tout : chroma key + timestamp + position
./video_merger -m main.mp4 -o overlay.mp4 \
  -c 0,255,0 -t 50 -ts 15.5 -p topright -s 0.75 -out result.avi
Le programme affiche maintenant l'alignement choisi et la frame de d√©but calcul√©e pour plus de clart√© ! üé¨R√©essayerClaude n'a pas encore la capacit√© d'ex√©cuter le code qu'il g√©n√®re.CEst ce qu'il est possible d'avoir le son de la premiere video qui sera dans la video finale ?ModifierVideo Merger avec Chroma KeyCode‚ÄÇ‚àô‚ÄÇVersion 6¬†    cout << "\nTraitement vid√©o termin√©! Vid√©o sauvegard√©e: " << cfg.outputVideo << endl;
    
    mainCap.release();
    overlayCap.release();
    writer.release();
    
    // Extraire et r√©int√©grer l'audio avec ffmpeg
    cout << "\nInt√©gration deParfait ! J'ai ajout√© l'int√©gration automatique de l'audio de la vid√©o principale. Le programme utilise maintenant ffmpeg pour r√©int√©grer l'audio apr√®s le traitement vid√©o.
Comment √ßa fonctionne :

OpenCV traite la vid√©o (fusion des images)
ffmpeg ajoute l'audio automatiquement depuis la vid√©o principale

Pr√©requis suppl√©mentaire :
bash# Sur Ubuntu/Debian
sudo apt-get install ffmpeg

# Sur macOS
brew install ffmpeg

# Sur Windows
# T√©l√©charger ffmpeg depuis https://ffmpeg.org/ et l'ajouter au PATH
Compilation (mise √† jour) :
bash# D√©pendances compl√®tes
sudo apt-get install cmake build-essential libopencv-dev ffmpeg

# Compilation (identique)
mkdir build && cd build
cmake ..
make
Utilisation (inchang√©e) :
bash# L'audio est maintenant automatiquement inclus !
./video_merger -m main.mp4 -o overlay.mp4 -out result.avi

# Avec tous les param√®tres
./video_merger -m main.mp4 -o overlay.mp4 \
  -c 0,255,0 -ts 10 -p bottomright -out result.avi
Que se passe-t-il :

‚úÖ Si ffmpeg est install√© : Audio int√©gr√© automatiquement
‚ö†Ô∏è Si ffmpeg n'est pas install√© : Le programme affiche une commande √† ex√©cuter manuellement

Le programme conserve la vid√©o temporaire et affiche les instructions si ffmpeg n'est pas disponible, vous permettant d'int√©grer l'audio plus tard ! üîäR√©essayerClaude n'a pas encore la capacit√© d'ex√©cuter le code qu'il g√©n√®re.


Parfait ! J'ai cr√©√© une application d√©di√©e mergeimagetovideo sp√©cialement optimis√©e pour fusionner une image sur une vid√©o. üé®
Nouvelles fonctionnalit√©s sp√©cifiques :
1. Support complet du canal alpha PNG
bash# PNG avec transparence native
./mergeimagetovideo -v video.mp4 -i logo_transparent.png -p topright

# Ignorer le canal alpha si n√©cessaire
./mergeimagetovideo -v video.mp4 -i image.png --no-alpha
2. Contr√¥le de l'opacit√© (-op, --opacity)
bash# Watermark semi-transparent (50%)
./mergeimagetovideo -v video.mp4 -i watermark.png -op 0.5 -p center

# Logo tr√®s discret (20%)
./mergeimagetovideo -v video.mp4 -i logo.png -op 0.2 -p bottomright
3. Interface simplifi√©e et intuitive
Les param√®tres sont optimis√©s pour le cas d'usage image/vid√©o
Structure du projet mise √† jour :
video-merger/
‚îú‚îÄ‚îÄ CMakeLists.txt
‚îú‚îÄ‚îÄ main.cpp                    # video_merger (vid√©o + vid√©o/image)
‚îú‚îÄ‚îÄ mergeimagetovideo.cpp       # mergeimagetovideo (vid√©o + image uniquement)
‚îî‚îÄ‚îÄ build/
    ‚îú‚îÄ‚îÄ video_merger
    ‚îî‚îÄ‚îÄ mergeimagetovideo
Compilation :
bashmkdir build && cd build
cmake ..
make

# R√©sultat : 2 ex√©cutables
# - video_merger : fusion vid√©o/vid√©o ou vid√©o/image
# - mergeimagetovideo : fusion vid√©o/image uniquement (optimis√©)
Exemples d'utilisation de mergeimagetovideo :
Logo / Watermark
bash# Logo en haut √† droite, 30% de la taille
./mergeimagetovideo -v video.mp4 -i logo.png -p topright -s 0.3

# Watermark centr√© avec transparence 30%
./mergeimagetovideo -v video.mp4 -i watermark.png -p center -op 0.3

# Logo en bas √† gauche toute la vid√©o
./mergeimagetovideo -v video.mp4 -i brand.png -p bottomleft -s 0.2
Image temporaire
bash# Image de 5s √† 15s (300 frames √† 30fps)
./mergeimagetovideo -v video.mp4 -i overlay.jpg -ts 5 -d 300 -p center

# Image √† la frame 100, dur√©e 200 frames
./mergeimagetovideo -v video.mp4 -i image.png -f 100 -d 200

# Image qui appara√Æt √† la fin (derni√®res 5 secondes)
./mergeimagetovideo -v video.mp4 -i end_screen.jpg -a end -d 150
Chroma key
bash# Image avec fond vert transparent
./mergeimagetovideo -v video.mp4 -i image_green.jpg \
  -c 0,255,0 -t 40 -p center

# Image avec fond bleu, semi-transparente
./mergeimagetovideo -v video.mp4 -i blue_bg.png \
  -c 0,0,255 -op 0.7 -p topright
Combinaisons avanc√©es
bash# Logo PNG transparent, position personnalis√©e, opacit√© 80%
./mergeimagetovideo -v video.mp4 -i logo.png \
  -p custom -x 50 -y 50 -op 0.8 -s 0.5

# Watermark avec chroma key + opacit√©
./mergeimagetovideo -v video.mp4 -i watermark.jpg \
  -c 255,255,255 -t 30 -op 0.4 -p bottomright

# Image qui appara√Æt progressivement (simul√© par opacit√©)
./mergeimagetovideo -v video.mp4 -i overlay.png \
  -ts 10 -d 90 -p center -op 0.6
Avantages de mergeimagetovideo vs video_merger :
Fonctionnalit√©mergeimagetovideovideo_mergerSupport PNG alpha‚úÖ Optimis√©‚úÖ BasiqueContr√¥le opacit√©‚úÖ 0.0 √† 1.0‚ùåPerformance‚ö° Plus rapide (pas de d√©codage vid√©o overlay)StandardInterfaceüéØ D√©di√©e imagesüîÄ G√©n√©riqueBlending alpha‚úÖ Avanc√©‚úÖ Simple
Aide int√©gr√©e :
bash./mergeimagetovideo --help
# Affiche une aide compl√®te avec exemples
Les deux applications sont maintenant disponibles avec des cas d'usage compl√©mentaires ! üöÄR√©essayerClaude n'a pas encore la capacit√© d'ex√©cuter le code qu'il g√©n√®re.
